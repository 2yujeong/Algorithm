/*
문제 출처 : https://www.acmicpc.net/problem/7573 (백준 온라인 저지)

고기를 잡을 수 있는 영역, 물고기의 위치, 그물의 길이가 주어졌을 때 한 번의 그물치기로 잡을 수 있는 가장 많은 물고기의 마릿수를 구하는 문제.
고기를 잡을 수 있는 영역은 (1, 1)부터 (N, N)까지 N x N 크기의 모눈종이 모양으로 되어있으며
고기잡이 배는 모눈 위의 한 위치에 자리를 잡고 그물을 자신의 오른쪽과 아래쪽 방향으로 칠 수 있다.
그물을 치면 그물 안, 그리고 그물에 걸친 물고기들을 잡을 수 있다. 
길이가 l인 그물은 한 변의 길이가 1 이상의 정수인 직사각형 모양으로 치게 된다. 
예를 들어, l = 10이라면, 칠 수 있는 그물의 모양은 1×4, 2×3, 3×2, 4×1과 같이 4가지 형태의 직사각형이 된다. 

먼저 물고기들의 위치를 오름차순으로 정렬한다.
가장 왼쪽 위에 위치한 물고기부터 각 물고기들의 위치를 기준점 삼아 오른쪽-아래 방향으로 그물을 쳤을 때 그물에 몇 마리가 잡히는지를 카운트한다.
이때 그물을 왼쪽으로 한 칸씩, 총 그물의 너비만큼 움직이며 현재 기준점에 있는 물고기를 포함하여 최대한 많은 물고기를 잡을 수 있는 경우를 판별한다.
현재 그물의 위치보다 위쪽에 있는 물고기의 경우에는 이미 위에서 판별이 끝난 상태고 
아래쪽에 있는 물고기들의 경우에는 그물을 아래 방향으로 옮기면 현재 기준 물고기를 잡을 수 없게 되므로 
그물을 상하로 움직일 필요는 없다.
*/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
	int n, l, m;
	cin >> n >> l >> m;

	vector<pair<int, int>> fish;

	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;

		fish.push_back({ a, b });
	}

	sort(fish.begin(), fish.end()); // 물고기들을 위치에 따라 정렬

	int max = 0;
	for (int h = 1; h < l / 2; h++) { // 그물의 높이
		int w = l / 2 - h; // 그물의 너비

		if (h >= n || w >= n)
			continue;

		for (int a = 0; a < fish.size(); a++) { // a번째 물고기의 위치를 그물을 칠 위치의 기준점으로 잡는다.
			int i = fish[a].first;
			int j = fish[a].second;
			for (int k = 0; k <= w; k++) { // 그물을 k만큼까지 왼쪽으로 1씩 옮겨가면서 몇 마리의 물고기가 잡히는 지를 구함(그물은 좌우로만 움직이며 상하로는 움직일 필요 X)
				int cnt = 1;
				for (int b = a + 1; b < fish.size(); b++) { // a번째 물고기 보다 위치상 아래 있는 물고기들에 대해 그물에 잡히는지 탐색
					int ii = fish[b].first;
					int jj = fish[b].second;
					if (ii - i > h) // b번째 물고기가 그물의 높이보다 더 먼 길이만큼 아래 방향으로 떨어져 있으면 b + 1번째 물고기부터는 그보다도 더 멀리 떨어져 있으므로 더이상 잡힐 일이 없다.
						break;

					if ((j - k) <= jj && (j - k) + w >= jj) // (j - k)행을 기준으로 오른쪽으로 그물을 펼쳤을 때 그물의 너비(w) 내에 존재하는 물고기라면 그물에 잡힌다.
						cnt++;
				}

				if (cnt > max)
					max = cnt;
			}
		}
	}

	cout << max;

	return 0;
}
