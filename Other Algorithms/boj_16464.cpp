/*
문제 출처 : https://www.acmicpc.net/problem/16464 (백준 온라인 저지)

딜러가 로또 기계에서 2 이상의 정수인 K가 써진 공을 하나 뽑는다.
플레이어는 1 이상 K - 1 이하의 정수가 한 번씩 쓰여 있는 카드들 중 몇 장을 받아, 받은 카드들의 합으로 K를 완성해야 한다.
이때 카드는 연속된 몇 장의 카드만 골라서 받을 수 있다.
연속된 카드들의 합으로 딜러의 수 K를 만들 수 없을 경우, 플레이어가 패배한다.
K가 주어졌을 때 플레이어의 승리 가능 여부를 출력하는 문제.

처음에는 두 개의 포인터를 이용하여 풀었는데 시간초과가 떠서 다른 사람의 풀이를 참고하였다.
만약 k가 홀수인 소인수 p를 가지고 있다면, k를 2^n * p (p는 홀수인 소인수이므로 소수) 형태로 나타낼 수 있다.
이 경우 (p - 1) / 2 >= 2^n일 때는 k를 ... + (p - 3) / 2 + (p - 1) / 2 + (p + 1) / 2 + (p + 3) / 2 + ...로
 ex) 14 = 2^1 * 7 = 2 + 3 + 4 + 5
(p - 1) / 2 < 2^n일 때는 k를 ... + 2^n - 1 + 2^n + 2^n + 1 + ...로 나타낼 수 있으므로
 ex) 24 = 2^3 * 3 = 7 + 8 + 9
어떠한 경우에도 k를 연속된 수로 표현할 수 있다.
k를 2^n * p 형태로 나타낼 수 없는 경우, 즉 k가 홀수인 소인수를 포함하고 있지 않은 2의 제곱수인 경우에는 k를 연속된 수로 표현할 수 없다.
따라서 k가 2의 제곱수인지 아닌지만 판별하면 된다.

시간복잡도는 O(tlog k)

참고한 풀이 출처 : https://blog.encrypted.gg/702
*/

#include <iostream>
#include <vector>
using namespace std;

int main() {
	int t;
	cin >> t;

	while (t--) {
		int k;
		cin >> k;

		while (k % 2 != 1) {
			k /= 2;
		}

		if (k == 1)
			cout << "GoHanGang" << endl;
		else
			cout << "Gazua" << endl;
	}

	return 0;
}
