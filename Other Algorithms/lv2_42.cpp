/*
문제 출처 : https://programmers.co.kr/learn/courses/30/lessons/12980 (프로그래머스 Level 2)

한 번에 K 칸을 앞으로 점프하거나, (현재까지 온 거리) x 2 에 해당하는 위치로 순간이동을 할 수 있는 특수한 기능을 가진 아이언 슈트가 있다.
순간이동을 하면 건전지 사용량이 줄지 않지만, 앞으로 K 칸을 점프하면 K 만큼의 건전지 사용량이 줄어든다.
아이언 슈트 구매자가 이동하려는 거리 N이 주어졌을 때, 사용해야 하는 건전지 사용량의 최솟값을 리턴하는 문제.

순간이동 시에는 (현재까지 온 거리) x 2 만큼 움직이므로
짝수 위치는 그 위치의 절반까지만 가도 더이상 건전지를 들이지 않고 순간이동만으로 해당 위치에 도착할 수 있다.
따라서 주어진 N을 2로 계속 나눠가며 건전지를 사용할 필요 없이 연속된 순간이동만으로 N까지 도달할 수 있는 위치들 중 처음 위치 0과 가장 가까운 위치를 찾는다.
만약 2로 더이상 나눌 수 없는 홀수 위치가 나온다면, 해당 위치에서 1을 빼줘서 하나 전 위치, 즉 짝수 위치로 이동하고 건전지 사용량을 1 늘려준다.
예를 들어 위치 10의 절반은 위치 5인데, 5가 홀수이므로 1을 빼줘서 위치 4로 이동한 경우를 생각해보자.
이는 위치 4에서 건전지를 써서 위치 5로 한 칸 점프한 후 순간이동으로 위치 10까지 간 게 되고, 이 경우가 위치 4에서 위치 10까지 건전지를 최소로 써서 이동한 경로이다.
그 다음에는 위치 4를 출발 위치인 위치 0이 때올 때까지 다시 2로 계속 나눠가면 된다.

시간복잡도는 O(log n)
*/

#include <iostream>
using namespace std;

int solution(int n)
{
    int ans = 0;
    
    while (n != 0) {
        if (n % 2 != 0) {
            n--;
            ans++;
        }
        n /= 2;
    }
    
    return ans;
}
