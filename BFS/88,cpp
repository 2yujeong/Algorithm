/*
문제 출처 : https://www.inflearn.com/course/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98# (인프런, 알고리즘 문제풀이 강의)

최단거리를 구하기 위한 BFS 기본 문제.

시간복잡도는 O(n^2)
*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int map[7][7];

class point {
public:
	int x, y, dist;
};

queue<point> q;

int main() {
	for (int i = 0; i < 7; i++) {
		for (int j = 0; j < 7; j++) {
			cin >> map[i][j];
		}
	}

	q.push({ 0, 0, 0 });
	map[0][0] = 1;

	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int dist = q.front().dist;
		q.pop();

		if (x == 6 && y == 6) {
			cout << dist;

			exit(0);
		}

		if (x - 1 >= 0 && map[x - 1][y] == 0) {
			q.push({ x - 1, y, dist + 1 });
			map[x - 1][y] = 1;
		}
		if (x + 1 < 7 && map[x + 1][y] == 0) {
			q.push({ x + 1, y, dist + 1 });
			map[x + 1][y] = 1;
		}
		if (y - 1 >= 0 && map[x][y - 1] == 0) {
			q.push({ x, y - 1, dist + 1 });
			map[x][y - 1] = 1;
		}
		if (y + 1 < 7 && map[x][y + 1] == 0) {
			q.push({ x, y + 1, dist + 1 });
			map[x][y + 1] = 1;
		}
	}

	cout << -1;

	return 0;
}
