/*
문제 출처 : https://www.acmicpc.net/problem/11057 (백준 온라인 저지)

오르막 수는 수의 자리가 오름차순을 이루는 수를 말한다. 
이때 수는 0으로 시작할 수 있으며 인접한 수가 같아도 오름차순으로 친다.
입력 N에 대해 길이가 N인 오르막 수의 개수를 구하는 문제.

[DP 테이블 설계]
dp[i][j]는 길이가 i이면서 수 j로 시작하는 오르막 수의 개수를 의미한다.
먼저 길이가 2인 오르막 수에 대해 살펴보면,
앞자리가 0인 오르막 수는 0 뒤에 길이가 1이며 앞자리가 0 이상으로 시작하는 어떤 오르막 수가 와도 성립하므로 
dp[2][0] = dp[1][0 ~ 9]가 된다.
앞자리가 1인 오르막 수의 경우에도, 1 뒤에 길이가 1이며 앞자리가 1 이상으로 시작하는 어떤 오르막 수가 와도 성립하므로 
dp[2][1] = dp[1][1 ~ 9]가 된다.
길이가 3인 오르막 수에 대해서도 살펴보면
앞자리가 5인 오르막 수의 경우, 5 뒤에 길이가 2이며 앞자리가 5 이상으로 시작하는 어떤 오르막 수가 와도 성립하기 때문에 
dp[3][5] = dp[2][5 ~ 9]가 된다.
즉, 길이가 i이며 가장 앞자리가 j인 오르막 수의 개수(dp[i][j])는 
길이가 i - 1이며 가장 앞자리가 j 이상인 오르막 수들의 개수의 합(dp[i - 1][j] + dp[i - 1][j + 1] + ... + dp[i - 1][9])이 된다.

시간복잡도는 O(n)
*/

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int dp[1001][10];

int main() {
	int n;
	cin >> n;

	for (int i = 0; i <= 9; i++) { // DP 테이블 초기화
		dp[1][i] = 1; // i로 시작하면서 길이가 1인 오르막 수는 무조건 1개
	}

	for (int i = 2; i <= n; i++) {
		for (int j = 0; j <= 9; j++) { // 오름차 수는 앞자리가 0으로 시작할 수도 있으므로 j는 1이 아닌 0부터 시작
			for (int k = j; k <= 9; k++) { // 인접한 수가 같아도 오름차수능로 치므로 k는 j + 1부터가 아닌 j부터 시작
				dp[i][j] += dp[i - 1][k] % 10007;
			}
		}
	}

	int sum = 0;
	for (int i = 0; i <= 9; i++) {
		sum += dp[n][i];
	}

	cout << sum % 10007;

	return 0;
}
