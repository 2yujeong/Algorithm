/*
문제 출처 : https://www.acmicpc.net/problem/2828 (백준 온라인 저지)

N칸으로 나누어져 있는 스크린의 아래쪽에 M칸을 차지하는 바구니가 있다.
맨 처음 바구니는 스크린의 가장 왼쪽 M칸을 차지하고 있으며 이 바구니를 이용하여 사과 받기 게임을 하려고 한다.
사과는 N개의 칸 중 하나의 칸에서 떨어지며, 사과 하나가 바닥에 닿는 즉시 다른 사과가 떨어지기 시작한다.
바구니를 이용하여 사과를 모두 담으려고 할 때, 바구니의 이동 거리의 최솟값을 구하는 문제.

바구니의 위치를 저장하는 basket 변수를 이용하여, 사과가 떨어질 때마다 바구니 위치를 바꿔주는 시뮬레이션 방식으로 풀었다.
사과가 떨어지는 위치가 바구니의 위치보다 왼쪽이라면, 바구니의 시작 지점(basket 변수)을 사과가 떨어지는 위치까지 옮겨주는 게 최소 이동 거리가 되고
사과가 떨어지는 위치가 바구니의 위치보다 오른쪽이라면, 바구니의 끝 지점(basket + m - 1)을 사과가 떨어지는 위치까지 옮겨주는 게 최소 이동거리가 된다.

시간복잡도는 떨어지는 사과의 개수가 n이라고 하면 O(n)
*/

#include <iostream>
using namespace std;

int main() {
	int n, m, apple;
	cin >> n >> m >> apple;

	int basket = 1, dist = 0;;

	while (apple--) {
		int loc;
		cin >> loc;

		if (loc >= basket && loc <= basket + m - 1)
			continue;
		if (loc < basket) {
			dist += basket - loc;
			basket = loc;
		}
		if (loc > basket + m - 1) {
			dist += loc - (basket + m - 1);
			basket = loc - m + 1;
		}
	}

	cout << dist;

	return 0;
}
